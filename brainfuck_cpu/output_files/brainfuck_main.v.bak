module brainfuck_main (
        input clk,
        input rst,

        output [3:0] led,
        output uart_out,
        output [6:0] Segments,
        output [3:0] Cathodes
        );
        
parameter c_CLKS_PER_BIT = 5208; //9600 baudrate 50MHz clk

wire   clk_slow; 
reg    clk_slow_reg = 0;
assign clk_slow = clk_slow_reg;

//data memory initialization
wire [9:0] address_sig;
wire [7:0]  q_sig, data_sig;
wire        wren_sig, rden_sig;
reg  [9:0] address_sig_reg = 0;
reg  [7:0]  data_sig_reg = 0;
reg         wren_sig_reg = 0, rden_sig_reg = 0;
assign data_sig    = data_sig_reg;
assign address_sig = address_sig_reg;
assign wren_sig    = wren_sig_reg;
assign rden_sig    = rden_sig_reg;

ram RAM_INST (
    .address (address_sig),
    .clock   (clk),
    .data    (data_sig),
    .rden    (rden_sig),
    .wren    (wren_sig),
    .q       (q_sig)
    );

//program memory initialization
wire [9:0] prog_address_sig;
wire [3:0]  prog_q_sig, prog_data_sig;
wire        prog_wren_sig, prog_rden_sig;
reg  [9:0] prog_address_sig_reg = 0;
reg  [3:0]  prog_data_sig_reg = 0;
reg         prog_wren_sig_reg = 0, prog_rden_sig_reg = 0;
assign prog_data_sig    = prog_data_sig_reg;
assign prog_rden_sig    = prog_rden_sig_reg;
assign prog_address_sig = prog_address_sig_reg;
assign prog_wren_sig    = prog_wren_sig_reg;

prog_ram PROG_RAM_INST (
    .address (prog_address_sig),
    .clock   (clk),
    .data    (prog_data_sig),
    .rden    (prog_rden_sig),
    .wren    (prog_wren_sig),
    .q       (prog_q_sig)
    );

//uart module initialization
wire       w_Tx_Done, r_Tx_DV, w_Tx_Active;
wire [7:0] r_Tx_Byte;
reg  [7:0] r_Tx_Byte_reg = 0;
reg        r_Tx_DV_reg = 0;
assign     r_Tx_Byte = r_Tx_Byte_reg;
assign     r_Tx_DV = r_Tx_DV_reg;

uart_tx #(.CLKS_PER_BIT(c_CLKS_PER_BIT)) UART_TX_INST (
    .i_Clock     (clk),
    .i_Tx_DV     (r_Tx_DV),
    .i_Tx_Byte   (r_Tx_Byte),
    .o_Tx_Active (w_Tx_Active),
    .o_Tx_Serial (uart_out),
    .o_Tx_Done   (w_Tx_Done)
    );
    
wire [3:0] Binary_Num_1, Binary_Num_2, Binary_Num_3, Binary_Num_4;
reg [3:0] Binary_Num_reg_1 = 0, Binary_Num_reg_2 = 0, Binary_Num_reg_3 = 0, Binary_Num_reg_4 = 0;

assign Binary_Num_1 = Binary_Num_reg_1;
assign Binary_Num_2 = Binary_Num_reg_2;
assign Binary_Num_3 = Binary_Num_reg_3;
assign Binary_Num_4 = Binary_Num_reg_4;

seven_segment_controller SEVEN_SEG_INST (
    .i_Clk (clk),
    .i_Binary_Num_1 (Binary_Num_1),
    .i_Binary_Num_2 (Binary_Num_2),
    .i_Binary_Num_3 (Binary_Num_3),
    .i_Binary_Num_4 (Binary_Num_4),
    .o_Segment (Segments),
    .o_Cathode (Cathodes)
   );
    
    
reg [31:0] clk_counter = 0;

always @ (posedge clk) begin
    clk_counter <= (~rst) | (clk_counter > 10000) ? 0 : clk_counter + 1;
    clk_slow_reg <= ~rst           ? 1'b1 : 
                clk_counter == 10000 ? ~clk_slow_reg :
                clk_slow_reg;
end

reg [3:0] led_reg = 0;
assign led = led_reg;

reg [9:0] program_counter = 0;
reg [3:0] cpu_state = 0;
reg [3:0] bracket_flag = 0;
reg [9:0] bracket_delta = 10'h0;
reg flag_output_begin = 0, flag_output_active = 0;


localparam  NOP   = 0, //
            CMOVR = 1, // >
            CMOVL = 2, // <
            CADD  = 3, // +
            CRED  = 4, // -
            COUT  = 5, // .
            CIN   = 6, // ,
            CBEG  = 7, // [
            CEND  = 8; // ]
            
localparam  RESTART = 0,
            INSTR_FETCH = 1,
            INSTR_ANALYSIS = 2,
            HALT = 4,
            WAIT = 5;
            
localparam  UPDATE = 1,
            STOP = 0;
            
localparam  RAM_ADDR_SETUP = 0,
            RAM_DATA_CHANGE = 1,
            RAM_DATA_READ = 2,
            RAM_IDLE = 3;
            
localparam  RAM_ADDR_SETUP_INIT = 0,
            RAM_ADDR_SETUP_GET = 1;
            
localparam  RAM_DATA_CHANGE_INIT = 0,
            RAM_DATA_CHANGE_DONE = 1;
            
localparam  DEFAULT = 0,
            FIND_OPENING_BRACKET = 1,
            FIND_CLOSING_BRACKET = 2;
            

//instruction fetch
always @ (posedge clk_slow) begin
    
    prog_address_sig_reg <= program_counter;
    prog_wren_sig_reg <= 0;
    prog_rden_sig_reg <= 1;
    
end
//data show
always @ (posedge clk_slow) begin

    led_reg <= ~address_sig[3:0];
    Binary_Num_reg_1 <= prog_address_sig_reg[3:0]; //left display
    Binary_Num_reg_2 <= prog_q_sig[3:0];
    Binary_Num_reg_3 <= q_sig[7:4];
    Binary_Num_reg_4 <= q_sig[3:0]; //right display
    
end
//cpu control
always @ (posedge clk_slow) begin
    
    case (cpu_state)
        
        RESTART: begin 
            
            address_sig_reg <= 0;
            data_sig_reg <= 0;
            rden_sig_reg <= 1;
            wren_sig_reg <= 0;
            program_counter <= 0;
            cpu_state <= WAIT;
            bracket_flag <= DEFAULT;
            bracket_delta <= 10'h0;
            flag_output_begin <= 0;
            
        end
        
        HALT: begin
        
            //good night 
        
        end
        
        WAIT: begin
            
            flag_output_begin <= 0;
            wren_sig_reg <= 0;
            rden_sig_reg <= 1;
            
            if(program_counter < 1023) begin 
                cpu_state <= INSTR_ANALYSIS;
            end
            else begin
                cpu_state <= HALT;
            end
        
        end

        INSTR_ANALYSIS: begin
            
            case (bracket_flag)
                
                DEFAULT: begin
                
                    case (prog_q_sig)
                    
                        CMOVL: begin
                        
                            if(address_sig_reg != 0) begin
                                address_sig_reg <= address_sig_reg - 10'h1;
                            end
                            cpu_state <= WAIT;
                            program_counter <= program_counter + 10'h1;
                            
                        end
                        
                        CMOVR: begin
                        
                            address_sig_reg <= address_sig_reg + 10'h1;
                            cpu_state <= WAIT;
                            program_counter <= program_counter + 10'h1;
                            
                        end
                        
                        CADD: begin
                        
                            data_sig_reg <= q_sig + 8'h1;
                            cpu_state <= WAIT;
                            program_counter <= program_counter + 10'h1;
                            wren_sig_reg <= 1;
                            rden_sig_reg <= 0;
                            
                        end
                        
                        CRED: begin
                        
                            data_sig_reg <= q_sig - 8'h1;
                            cpu_state <= WAIT;
                            program_counter <= program_counter + 10'h1;
                            wren_sig_reg <= 1;
                            rden_sig_reg <= 0;
                            
                        end
                        
                        CIN: begin
                        
                            cpu_state <= WAIT;
                            program_counter <= program_counter + 10'h1;
                            
                        end
                        
                        COUT: begin
                            if(flag_output_active == 0) begin
                                cpu_state <= WAIT;
                                program_counter <= program_counter + 10'h1;
                                flag_output_begin <= 1;
                            end
                            else if(flag_output_active == 1) begin
                                cpu_state <= INSTR_ANALYSIS;
                            end
                        end
                        
                        CBEG: begin
                        
                            if(q_sig == 0) begin
                                bracket_flag <= FIND_CLOSING_BRACKET;
                            end

                            cpu_state <= WAIT;
                            program_counter <= program_counter + 10'h1;
                            
                        end
                        
                        CEND: begin
                            
                            if (q_sig != 0) begin
                                bracket_flag <= FIND_OPENING_BRACKET;
                                program_counter <= program_counter - 10'h1;
                            end
                            else begin //q == 0
                                program_counter <= program_counter + 10'h1;
                            end
                            
                            cpu_state <= WAIT;
                            
                        end
                        
                        //NOP or every other operation
                        default: begin
                        
                            cpu_state <= WAIT;
                            program_counter <= program_counter + 10'h1;
                            
                        end
                        
                    endcase
                end
                
                FIND_OPENING_BRACKET: begin
                    
                    cpu_state <= WAIT;
                    
                    case (prog_q_sig)
                       
                        CBEG: begin
                        
                            if((bracket_delta) == 10'h0) begin
                                bracket_flag <= DEFAULT;
                                program_counter <= program_counter + 10'h1;
                            end
                            else begin 
                                bracket_delta <= bracket_delta - 10'h1;
                                program_counter <= program_counter - 10'h1;
                            end
                            
                        end
                        
                        CEND: begin
                        
                            bracket_delta <= bracket_delta + 10'h1;
                            program_counter <= program_counter - 10'h1;
                            
                        end
                        
                        default: begin
                        
                            program_counter <= program_counter - 10'h1;
                            
                        end
                        
                    endcase
                    
                end
                
                FIND_CLOSING_BRACKET: begin
                    
                    program_counter <= program_counter + 10'h1;
                    cpu_state <= WAIT;
                    
                    case (prog_q_sig)
                        
                        CBEG: begin
                        
                            bracket_delta <= bracket_delta + 10'h1;
                            
                        end
                        
                        CEND: begin
                        
                            if((bracket_delta) == 10'h0) begin
                                bracket_flag <= DEFAULT;
                            end
                            else begin 
                                bracket_delta <= bracket_delta - 10'h1;
                            end
                            
                        end
                        
                        default: begin
                        
                        end
                        
                    endcase
                    
                end
            
            endcase
            
        end
        
    endcase
end

reg flag_output_edge_detect = 0;

always @(posedge clk) begin

    flag_output_edge_detect <= flag_output_begin;
    
    if (flag_output_begin & (~flag_output_edge_detect) & (flag_output_active == 0)) begin
        flag_output_active <= 1;
        r_Tx_DV_reg <= 1;
        r_Tx_Byte_reg <= q_sig;
    end
    else if(flag_output_active == 1) begin
        r_Tx_DV_reg <= 0;
        if((w_Tx_Done == 1)) begin
            flag_output_active <= 0;
        end
    end
    
end

endmodule
